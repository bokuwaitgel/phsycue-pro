// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String   @id @default(uuid())
  mobile             String   @unique
  firstName          String
  lastName           String
  salt               String   @default("")
  password           String   @default("")
  email              String?
  pushToken          String   @default("")
  refreshToken       String
  refreshTokenExpiry DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  Personal         Personal?
  Teacher          Teacher[]
  CourseEnrollment CourseEnrollment[]
}

model Otp {
  id        String   @id @default(uuid())
  mobile    String
  otpCode   String
  createdAt DateTime @default(now())
}

model Teacher {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id])
  courseEnrollments CourseEnrollment[]

  @@index([userId])
  Courses Courses[]
  Exercises Exercises[]
  Todo Todo[]
}

model Personal {
  id                String @id @default(uuid())
  userId            String @unique

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  bodyHistories     BodyHistory[]
  sleepHistories    SleepHistory[]
  waterHistories    WaterHistory[]
  caloriesHistories CaloriesHistory[]
  
  user              User @relation(fields: [userId], references: [id])
}

model BodyHistory {
  id         String   @id @default(uuid())
  weight     Float
  height     Float
  birthDate  DateTime
  personalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model SleepHistory {
  id         String   @id @default(uuid())
  personalId String
  sleepTime  DateTime
  wakeTime   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model WaterHistory {
  id           String   @id @default(uuid())
  personalId   String
  waterIntake  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model CaloriesHistory {
  id              String   @id @default(uuid())
  personalId      String
  caloriesIntake  Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  personal        Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model Meal {
  id        String   @id @default(uuid())
  mealType String
  mealTime DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ExerciseMealPlan ExerciseMealPlan[]
  mealRecipes      MealRecipe[]
}

model Recipe {
  id                 String   @id @default(uuid())
  recipe_name        String
  recipe_description String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  mealRecipes MealRecipe[]
}

model MealRecipe {
  id       String @id @default(uuid())
  meal     Meal   @relation(fields: [mealId], references: [id])
  mealId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@index([mealId])
  @@index([recipeId])
}

model Tracking {
  id         String   @id @default(uuid())
  userId     String
  mealId     String
  recipeId   String
  waterId    String
  caloriesId String
  sleepId    String
  bodyId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Courses {
  id                 String   @id @default(uuid())
  courseImage                String
  courseName         String
  courseDescription  String
  coursePrice        Float
  courseType         String
  teacherId          String


  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  teacher           Teacher @relation(fields: [teacherId], references: [id])
  
  courseEnrollments CourseEnrollment[]
  courseDetails     CourseDetail?
  courseExercises   CourseExercises[]

  CourseSchedule CourseSchedule[]

  @@index([teacherId])
}

model CourseExercises {
  id        String   @id @default(uuid())
  courseId  String
  exerciseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Courses   @relation(fields: [courseId], references: [id])
  exercises Exercises @relation(fields: [exerciseId], references: [id])

  @@index([courseId])
  @@index([exerciseId])
}

model CourseDetail {
  id                String @id @default(uuid())
  courseId          String @unique

  courseDescription String  @default("")
  courseImage       String  @default("")
  courseBanner      String  @default("")
  warning           String  @default("")
  needsInfo         String  @default("")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  courses           Courses @relation(fields: courseId, references: id)
  @@index([courseId])
}

model Exercises {
  id String @id @default(uuid())

  exerciseName          String
  exerciseDescription   String  @default("")
  exerciseImage         String  @default("")
  exerciseVideo         String  @default("")
  exerciseType          String
  teacherId             String 

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  

  teacher               Teacher @relation(fields: [teacherId], references: [id])
  
  exerciseMealPlans     ExerciseMealPlan[]
  exercisesTodos        ExercisesTodo[]
  courseExercises       CourseExercises[]
  

  @@index([teacherId])
}

model Todo {
  id        String   @id @default(uuid())
  todoName  String   @default("")
  todoDesc  String   @default("")
  todoImage String   @default("")
  todoVideo String   @default("")
  sets      Int
  refs      Int
  weight    Float
  total     Int
  bodyPart  String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  exercisesTodos ExercisesTodo[]

  @@index([teacherId])
}

model ExercisesTodo {
  id         String   @id @default(uuid())
  exerciseId String
  todoId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercises Exercises @relation(fields: [exerciseId], references: [id])
  todos     Todo      @relation(fields: [todoId], references: [id])

  @@index([exerciseId])
  @@index([todoId])

}

model ExerciseMealPlan {
  id         String   @id @default(uuid())
  exerciseId String
  mealId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercises Exercises @relation(fields: [exerciseId], references: [id])
  meals     Meal      @relation(fields: [mealId], references: [id])

  @@index([exerciseId])
  @@index([mealId])
}

model CourseEnrollment {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  teacherId        String
  course           Courses        @relation(fields: [courseId], references: [id])
  courseId         String
  courseSchedule   CourseSchedule @relation(fields: [courseScheduleId], references: [id])
  courseScheduleId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
  @@index([teacherId])
  @@index([courseId])
  @@index([courseScheduleId])
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Courses  @relation(fields: [courseId], references: [id])

  courseEnrollment CourseEnrollment[]
  @@index([courseId])
}

//survey thing
model survey {
  id                 String   @id @default(uuid())
  surveyName        String
  surveyDescription String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
