// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String   @id @default(uuid())
  mobile             String   @unique
  firstName          String
  lastName           String
  salt               String   @default("")
  password           String   @default("")
  email              String?
  pushToken          String   @default("")
  refreshToken       String
  refreshTokenExpiry DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  Personal         Personal?
  Teacher          Teacher[]
  CourseEnrollment CourseEnrollment[]
}

model Otp {
  id        String   @id @default(uuid())
  mobile    String
  otpCode   String
  createdAt DateTime @default(now())
}

model Teacher {
  id          String   @id @default(uuid())
  userId      String
  name        String   @default("")
  email       String   @default("")
  mobile      String   @default("")
  image       String   @default("")
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id])
  courseEnrollments CourseEnrollment[]

  @@index([userId])
  Courses Courses[]
  Exercises Exercises[]
  Todo Todo[]
}

model Personal {
  id                String @id @default(uuid())
  userId            String @unique

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  bodyHistories     BodyHistory[]
  sleepHistories    SleepHistory[]
  waterHistories    WaterHistory[]
  caloriesHistories CaloriesHistory[]
  trackerHistories  Tracker[]
  
  user              User @relation(fields: [userId], references: [id])
}

model BodyHistory {
  id         String   @id @default(uuid())
  weight     Float
  height     Float
  birthDate  DateTime
  personalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model SleepHistory {
  id         String   @id @default(uuid())
  personalId String
  sleepTime  DateTime
  wakeTime   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model WaterHistory {
  id           String   @id @default(uuid())
  personalId   String
  waterIntake  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  personal Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model CaloriesHistory {
  id              String   @id @default(uuid())
  personalId      String
  name            String
  caloriesIntake  Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  personal        Personal @relation(fields: [personalId], references: [id])

  @@index([personalId])
}

model Meal {
  id        String   @id @default(uuid())
  mealType String
  mealTime DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ExerciseMealPlan ExerciseMealPlan[]
  mealRecipes      MealRecipe[]
}

model Recipe {
  id                 String   @id @default(uuid())
  recipe_name        String
  recipe_description String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  mealRecipes MealRecipe[]
}

model MealRecipe {
  id       String @id @default(uuid())
  meal     Meal   @relation(fields: [mealId], references: [id])
  mealId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@index([mealId])
  @@index([recipeId])
}

model Tracker {
  id         String   @id @default(uuid())
  personalId     String
  courseId     String
  startTime  DateTime @default(now())
  endTime    DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  personal   Personal @relation(fields: [personalId], references: [id])
  course     Courses @relation(fields: [courseId], references: [id])


  @@index([personalId])
  @@index([courseId])
}

model Courses {
  id                 String   @id @default(uuid())

  title              String
  description        String
  price              Float
  type               String
  image              String
  isActive           Boolean @default(true)
  status             String  @default("active")

  teacherId          String


  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  teacher           Teacher @relation(fields: [teacherId], references: [id])
  
  courseEnrollments CourseEnrollment[]
  courseDetails     CourseDetail?
  courseExercises   CourseExercises[]

  CourseSchedule CourseSchedule[]

  @@index([teacherId])
  Tracker Tracker[]
}

model CourseExercises {
  id          String   @id @default(uuid())
  courseId    String
  exerciseId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses   Courses   @relation(fields: [courseId], references: [id])
  exercises Exercises @relation(fields: [exerciseId], references: [id])

  @@index([courseId])
  @@index([exerciseId])
}

model CourseDetail {
  id                String @id @default(uuid())
  courseId          String @unique

  title             String  @default("")
  detail            String  @default("")
  image             String  @default("")
  warning           String  @default("")
  needsInfo         String  @default("")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  courses           Courses @relation(fields: courseId, references: id)
  @@index([courseId])
}

model Exercises {
  id String @id @default(uuid())

  name                  String
  description           String  @default("")
  image                 String  @default("")
  video                 String  @default("")
  type                  String

  teacherId             String 

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  

  teacher               Teacher @relation(fields: [teacherId], references: [id])
  
  exerciseMealPlans     ExerciseMealPlan[]
  exercisesTodos        ExercisesTodo[]
  courseExercises       CourseExercises[]
  

  @@index([teacherId])
}

model Todo {
  id            String   @id @default(uuid())
  title         String   @default("")
  description   String   @default("")
  image         String   @default("")
  video         String   @default("")
  sets          Int
  refs          Int
  weight        Float
  total         Int
  bodyPart      String
  teacherId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  exercisesTodos ExercisesTodo[]

  @@index([teacherId])
}

model ExercisesTodo {
  id         String   @id @default(uuid())
  exerciseId String
  todoId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercises Exercises @relation(fields: [exerciseId], references: [id])
  todos     Todo      @relation(fields: [todoId], references: [id])

  @@index([exerciseId])
  @@index([todoId])

}

model ExerciseMealPlan {
  id         String   @id @default(uuid())
  exerciseId String
  mealId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercises Exercises @relation(fields: [exerciseId], references: [id])
  meals     Meal      @relation(fields: [mealId], references: [id])

  @@index([exerciseId])
  @@index([mealId])
}

model CourseEnrollment {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  teacherId        String
  course           Courses        @relation(fields: [courseId], references: [id])
  courseId         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
  @@index([teacherId])
  @@index([courseId])
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Courses  @relation(fields: [courseId], references: [id])
  @@index([courseId])
}

//survey thing
model survey {
  id                  String   @id @default(uuid())
  surveyName          String
  surveyDescription   String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}


model banner {
  id                  String   @id @default(uuid())
  name                String
  description         String
  imageURL            String
  type                String
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}